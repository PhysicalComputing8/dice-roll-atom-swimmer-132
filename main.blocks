<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="{#ns!PXqU6x)e%w?++xs">roll</variable></variables><block type="device_gesture_event" id="qubz:O8gZ!+kNU-#[/R9" x="5" y="0"><field name="NAME">Gesture.Shake</field><statement name="HANDLER"><block type="variables_set" id="VLkU-%zF_~^$Cc{(U}qD"><field name="VAR" id="{#ns!PXqU6x)e%w?++xs">roll</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="device_random" id="!2N3J4OKr*#RVhIOP#oT"><value name="min"><shadow type="math_number" id="OkBZ{@$n1|k?W?$u7pG!"><field name="NUM">1</field></shadow></value><value name="limit"><shadow type="math_number" id="l~WbV:(..KNR[!v28|mo"><field name="NUM">6</field></shadow></value></block></value><next><block type="function_call" id="h+P}m8ewKyCEnltgf5fG"><mutation name="show-pips" functionid="Z)ZS3i~Do;g4CJ$(yTn6"><arg name="number" id="ub*_?H`%UX8rQ;[CgRq," type="number"/></mutation><value name="ub*_?H`%UX8rQ;[CgRq,"><shadow type="math_number" id="Q9H^3tr_Jx9PUwH3-)70"><field name="NUM">1</field></shadow><block type="variables_get" id="wc9Z}w:=T~A.[fjj5o+T"><field name="VAR" id="{#ns!PXqU6x)e%w?++xs">roll</field></block></value></block></next></block></statement></block><block type="function_definition" id="=rQ^@ilD5E1JMHBZf7*M" x="0" y="210"><mutation name="show-pips" functionid="Z)ZS3i~Do;g4CJ$(yTn6"><arg name="number" id="ub*_?H`%UX8rQ;[CgRq," type="number"/></mutation><field name="function_name">show-pips</field><comment pinned="true" h="225.77230834960938" w="266.8948974609375">woah!! using functions. Very impressive.  AND you are passing an argument to your function.&#10;&#10;This is great stuff. &#10;&#10;I also like the way you designed the pips on your die face.</comment><value name="ub*_?H`%UX8rQ;[CgRq,"><shadow type="argument_reporter_number" id="H_EtZK8EhlaMvMp3]@rs"><field name="VALUE">number</field></shadow></value><statement name="STACK"><block type="controls_if" id="R$YBRXkAt{;dP(zNoXWs"><mutation else="1"/><value name="IF0"><shadow type="logic_boolean" id="wq$l]HH6@utDAc!VRnj|"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="rRHMY]Thz707sLcW@4(M"><field name="OP">EQ</field><value name="A"><shadow type="math_number" id="zHDy$4gZy2Yu9ZVmm@h/"><field name="NUM">0</field></shadow><block type="argument_reporter_number" id="-3XHS[@552z`@_m.{|O-"><field name="VALUE">number</field></block></value><value name="B"><shadow type="math_number" id=";#u((^KZ|_UlH.2SJe;b"><field name="NUM">1</field></shadow></value></block></value><statement name="DO0"><block type="device_show_leds" id="TAIB^=XIll=3yRY5WXEv"><field name="LEDS">`&#10;        . . . . . &#10;        . # # # . &#10;        . # # # . &#10;        . # # # . &#10;        . . . . .&#10;        `</field></block></statement><statement name="ELSE"><block type="controls_if" id="nlc!ld0}:R`Qf9H4q_yI"><mutation else="1"/><comment pinned="true" h="267.5793151855469" w="315.623779296875">Instead of nesting the if/then statements inside of each other, it would be better as a single if/then/else with multiple else branches. Since you are using the EQUALS comparison, you know that only ONE of your branches can possibly be true, so you can just have a series of checks on the value.</comment><value name="IF0"><shadow type="logic_boolean" id="}1[AZ3:2*qs]55t:7JJj"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="[GI$r2opJPJ}23}p~qq["><field name="OP">EQ</field><value name="A"><shadow type="math_number" id="?^`+[rV~8hj{Df6|zXW."><field name="NUM">0</field></shadow><block type="argument_reporter_number" id="kn(=0Wv:GC]3:{(9_(Rk"><field name="VALUE">number</field></block></value><value name="B"><shadow type="math_number" id="G~sLfhaw@u5Uc^{BxG%?"><field name="NUM">2</field></shadow></value></block></value><statement name="DO0"><block type="device_show_leds" id="obw{dFgQg*CZp3c##Yab"><field name="LEDS">`&#10;        . . . # # &#10;        . . . # # &#10;        . . . . . &#10;        # # . . . &#10;        # # . . .&#10;        `</field></block></statement><statement name="ELSE"><block type="controls_if" id="nn5BSBx~gi.PG7ei,p{3"><mutation else="1"/><value name="IF0"><shadow type="logic_boolean" id="Z0.e(rZ7$NF+gSMz#^bX"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="X+AUb$v7WZ?5a%7TZ(ls"><field name="OP">EQ</field><value name="A"><shadow type="math_number" id="}_=buB-k/7Rz1ld(HDN~"><field name="NUM">0</field></shadow><block type="argument_reporter_number" id="-m~Yun.5PPbM;V8~2^E0"><field name="VALUE">number</field></block></value><value name="B"><shadow type="math_number" id="$BO|AhKk4:]j}Qn;F3=o"><field name="NUM">3</field></shadow></value></block></value><statement name="DO0"><block type="device_show_leds" id="UaWJi03(`#?ZGZvwN+{X"><field name="LEDS">`&#10;        . . . . # &#10;        . . . . . &#10;        . . # . . &#10;        . . . . . &#10;        # . . . .&#10;        `</field></block></statement><statement name="ELSE"><block type="controls_if" id="){5Mrn]D|`DTqNM2D+g6"><mutation else="1"/><value name="IF0"><shadow type="logic_boolean" id="}F8kit1_smw?:,kPL/|*"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="ke=**zkf,ATp6v0{R+My"><field name="OP">EQ</field><value name="A"><shadow type="math_number" id="^+r/PRRZG#{+vzWz-Te$"><field name="NUM">0</field></shadow><block type="argument_reporter_number" id="n;s${0S1JsGe0kXylm9y"><field name="VALUE">number</field></block></value><value name="B"><shadow type="math_number" id="9$QzO8m{6zvoGOmlol,_"><field name="NUM">4</field></shadow></value></block></value><statement name="DO0"><block type="device_show_leds" id="xexh9@.%W1LdoKl0:@[B"><field name="LEDS">`&#10;        # # . # # &#10;        # # . # # &#10;        . . . . . &#10;        # # . # # &#10;        # # . # #&#10;        `</field></block></statement><statement name="ELSE"><block type="controls_if" id="g_kHW5#%4@B*nvWoDBnv"><mutation else="1"/><value name="IF0"><shadow type="logic_boolean" id="qO87J)Sh6!z0lV$FJ1q."><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="f^n.5Rtw3q%E-I@-[02+"><field name="OP">EQ</field><value name="A"><shadow type="math_number" id="eVlXcx0L^ov`SKTgoPxb"><field name="NUM">0</field></shadow><block type="argument_reporter_number" id="rRlB9vEq*+*ia%)vpn4I"><field name="VALUE">number</field></block></value><value name="B"><shadow type="math_number" id="w{!0(1E^_nFhb1Uv$Mf;"><field name="NUM">5</field></shadow></value></block></value><statement name="DO0"><block type="device_show_leds" id="MMA7{PqxL{Gt7yCs8^RF"><field name="LEDS">`&#10;        # . . . # &#10;        . . . . . &#10;        . . # . . &#10;        . . . . . &#10;        # . . . #&#10;        `</field></block></statement><statement name="ELSE"><block type="device_show_leds" id="*cO}vvlA|iXof;(_CP@X"><field name="LEDS">`&#10;        # . # . # &#10;        # . # . # &#10;        . . . . . &#10;        # . # . # &#10;        # . # . #&#10;        `</field></block></statement></block></statement></block></statement></block></statement></block></statement></block></statement></block></xml>